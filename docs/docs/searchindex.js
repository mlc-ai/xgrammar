Search.setIndex({"docnames": ["api/python/bitmask_ops", "api/python/compiled_grammar", "api/python/config", "api/python/exception", "api/python/grammar", "api/python/grammar_compiler", "api/python/grammar_matcher", "api/python/index", "api/python/structural_tag", "api/python/testing", "api/python/tokenizer_info", "developer_guide/building_docs", "developer_guide/code_coverage", "index", "start/installation", "start/quick_start", "tutorials/advanced_structural_tag", "tutorials/advanced_topics", "tutorials/constrained_decoding", "tutorials/ebnf_guided_generation", "tutorials/engine_integration", "tutorials/json_generation", "tutorials/structural_tag", "tutorials/workflow_of_xgrammar", "xgrammar_features/javascript_api", "xgrammar_features/runtime_safeguards", "xgrammar_features/serialization"], "filenames": ["api/python/bitmask_ops.rst", "api/python/compiled_grammar.rst", "api/python/config.rst", "api/python/exception.rst", "api/python/grammar.rst", "api/python/grammar_compiler.rst", "api/python/grammar_matcher.rst", "api/python/index.rst", "api/python/structural_tag.rst", "api/python/testing.rst", "api/python/tokenizer_info.rst", "developer_guide/building_docs.md", "developer_guide/code_coverage.md", "index.rst", "start/installation.md", "start/quick_start.md", "tutorials/advanced_structural_tag.md", "tutorials/advanced_topics.md", "tutorials/constrained_decoding.md", "tutorials/ebnf_guided_generation.md", "tutorials/engine_integration.md", "tutorials/json_generation.md", "tutorials/structural_tag.md", "tutorials/workflow_of_xgrammar.md", "xgrammar_features/javascript_api.md", "xgrammar_features/runtime_safeguards.md", "xgrammar_features/serialization.md"], "titles": ["Bitmask Operations", "xgr.CompiledGrammar", "Config", "Exception", "xgr.Grammar", "xgr.GrammarCompiler", "xgr.GrammarMatcher", "XGrammar Python API", "Structural Tag", "xgr.testing", "xgr.TokenizerInfo", "Building Docs", "Code Coverage", "\ud83d\udc4b Welcome to XGrammar", "Installation", "Quick Start", "Advanced Topics of the Structural Tag", "Advanced Topics", "Constrained Decoding", "EBNF-Guided Generation", "Integration with LLM Engine", "JSON Generation", "Structural Tag Usage", "Workflow of XGrammar", "JavaScript API", "Runtime Safeguards", "Serialization"], "terms": {"xgrammar": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 15, 16, 17, 22, 24, 25, 26], "allocate_token_bitmask": [0, 6, 7, 9, 17, 18, 19, 20, 21, 23], "batch_siz": [0, 20, 23], "int": [0, 1, 2, 4, 5, 6, 9, 10, 16, 21, 23], "vocab_s": [0, 9, 10, 15, 17, 19, 20, 21, 23], "torch": [0, 6, 9, 15, 19, 20, 21, 23], "tensor": [0, 6, 9, 17, 19, 20, 21, 23], "sourc": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 13], "alloc": [0, 18, 19, 20, 21, 23], "next": [0, 4, 6, 8, 16, 19, 20, 21, 22], "token": [0, 1, 5, 6, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 26], "predict": [0, 6], "The": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 25, 26], "i": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "an": [0, 5, 6, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 25], "int32": [0, 6, 9, 18, 23], "cpu": [0, 6, 9, 14, 15, 17, 19, 20, 21, 23], "shape": [0, 6, 17, 19, 20, 21, 23], "ceil": [0, 23], "32": [0, 9, 10, 23], "user": [0, 4, 6, 9, 10, 15, 16, 19, 21, 22], "who": 0, "have": [0, 12, 14, 15, 16, 18, 19, 20, 21, 23, 26], "own": [0, 20], "need": [0, 6, 10, 11, 14, 16, 20, 22], "manag": [0, 7, 11, 25], "cuda": [0, 15, 19, 20, 21, 23], "memori": [0, 1, 5, 17, 23], "can": [0, 1, 4, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26], "construct": [0, 1, 4, 5, 6, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26], "get_bitmask_shap": [0, 7], "bitmask_dtyp": [0, 7], "themselv": 0, "reason": [0, 22], "why": 0, "we": [0, 4, 6, 14, 17, 18, 19, 20, 21, 22, 23, 26], "us": [0, 1, 4, 5, 6, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "instead": [0, 1, 4, 5, 10, 11, 16], "uint32": 0, "old": 0, "version": [0, 1, 4, 7, 10, 11, 14, 26], "pytorch": 0, "do": [0, 1, 14, 18], "support": [0, 4, 5, 6, 9, 10, 14, 20, 22, 23, 26], "paramet": [0, 1, 2, 4, 5, 6, 8, 9, 10, 17, 22], "batch": [0, 6, 9, 19, 21, 23], "size": [0, 9, 10, 17, 18, 23], "vocabulari": [0, 6, 9, 10, 17, 18, 20, 23], "return": [0, 1, 2, 4, 5, 6, 9, 10, 17], "type": [0, 1, 2, 4, 5, 6, 8, 9, 10, 16, 18, 21, 26], "apply_token_bitmask_inplac": [0, 7, 19, 20, 21, 23], "logit": [0, 16, 18, 19, 21, 23], "option": [0, 4, 5, 6, 9, 10, 21], "none": [0, 2, 4, 5, 6, 9, 10], "indic": [0, 26], "list": [0, 4, 5, 6, 8, 9, 10, 16, 19, 20, 21, 22, 23], "appli": [0, 6, 18, 19, 20, 21, 22, 23], "place": [0, 23], "01": 0, "bitwis": 0, "compress": [0, 18, 23], "where": [0, 6, 16, 22], "0": [0, 6, 9, 10, 15, 18, 19, 20, 21, 23], "mean": [0, 4, 6, 8, 9, 16, 22, 25], "mask": [0, 1, 6, 9, 10, 16, 18, 19, 20, 21, 23], "1": [0, 2, 5, 6, 9, 10, 16, 17, 18, 19, 20, 21, 23, 25, 26], "It": [0, 1, 4, 5, 6, 8, 9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "gener": [0, 1, 4, 5, 6, 8, 9, 10, 13, 16, 18, 22], "fill": [0, 6, 9, 20, 23], "fill_next_token_bitmask": [0, 6, 9, 16, 18, 19, 20, 21, 23, 25], "after": [0, 6, 8, 12, 18, 20, 22, 23, 26], "set": [0, 2, 4, 5, 6, 9, 10, 12, 17, 18, 20, 22, 23, 25], "inf": 0, "should": [0, 4, 5, 6, 8, 9, 10, 15, 16, 20, 22, 23], "bitmask_s": 0, "respect": [0, 17], "rang": [0, 6, 9, 19, 20, 21], "j": [0, 24], "get_bitmask_valu": 0, "get": [0, 2, 4, 5, 6, 9, 18, 19, 20, 21, 25, 26], "th": 0, "bit": [0, 9], "row": 0, "note": [0, 1, 4, 5, 10, 12, 17, 18, 19, 20, 21, 22, 26], "pad": [0, 9, 10, 19, 20, 21], "thi": [0, 1, 2, 4, 5, 6, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "method": [0, 1, 2, 4, 5, 6, 9, 10, 16, 23, 26], "allow": [0, 2, 4, 5, 6, 8, 9, 16, 18, 22], "addit": [0, 9], "dimens": [0, 17], "If": [0, 1, 4, 5, 6, 9, 10, 14, 17, 22, 23, 25, 26], "exist": 0, "provid": [0, 6, 9, 10, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26], "real": [0, 23], "vocab": [0, 10], "detect": [0, 6, 10], "min": 0, "specifi": [0, 1, 4, 5, 6, 9, 10, 16, 18, 19, 21, 22], "which": [0, 12, 20, 22, 25], "especi": [0, 16, 18], "when": [0, 1, 3, 4, 5, 8, 9, 10, 11, 14, 16, 18, 20, 22, 23, 26], "ar": [0, 4, 5, 9, 10, 11, 12, 15, 17, 18, 19, 20, 21, 22, 26], "structur": [0, 3, 4, 5, 7, 9, 13, 15, 18, 19, 21, 23, 26], "request": [0, 19, 20, 21, 22], "unstructur": 0, "mix": [0, 22], "same": [0, 1, 4, 5, 10, 16, 17, 18, 20, 22, 23, 26], "skip": 0, "batch_id": 0, "As": 0, "long": [0, 6], "valid": [0, 2, 4, 5, 18, 19, 20, 21, 22], "perform": [0, 17, 23], "devic": [0, 15, 19, 20, 21, 23], "both": [0, 17], "them": [0, 6, 9, 10, 11, 16, 20], "gpu": [0, 14, 15, 19, 20, 21, 23], "launch": 0, "kernel": [0, 20], "implement": [0, 20, 22], "optim": [0, 6, 17], "prefer": [0, 11], "In": [0, 4, 5, 6, 9, 10, 12, 18, 19, 20, 21, 22, 23, 26], "practic": 0, "usual": 0, "so": [0, 4, 5, 6, 9, 17, 18, 19, 20, 21, 22, 23, 26], "manual": [0, 2, 10], "copi": [0, 14], "befor": [0, 10], "call": [0, 4, 5, 8, 9, 16, 20, 23], "function": [0, 6, 8, 9, 16, 17, 22], "default": [0, 2, 4, 5, 6, 9, 10, 20, 22, 25], "A": [0, 1, 2, 8, 9, 19, 23, 26], "uniqu": 0, "all": [0, 5, 6, 8, 14, 16, 19, 20, 21], "reset_token_bitmask": [0, 7], "reset": [0, 6, 19, 20, 21, 23], "full": [0, 11], "tupl": [0, 4, 5, 9], "arg": [0, 8], "ani": [0, 4, 5, 6, 8, 9, 10, 15, 16, 22], "kwarg": [0, 8, 9], "dtype": [0, 6, 23], "class": [1, 3, 4, 5, 6, 7, 9, 10, 16, 18, 21, 25, 26], "primari": 1, "object": [1, 4, 5, 6, 8, 9, 18, 21, 22, 23, 26], "store": [1, 5, 18, 25], "compil": [1, 5, 9, 12, 18, 19, 20, 21, 24, 25, 26], "grammar": [1, 5, 6, 7, 8, 9, 10, 18, 19, 20, 21, 22, 25], "grammarmatch": [1, 7, 9, 16, 18, 19, 21, 23, 25], "effici": [1, 19, 20, 21], "directli": [1, 14, 17, 18, 23], "grammarcompil": [1, 7, 15, 17, 18, 19, 21, 23, 25, 26], "attribut": [1, 5, 6, 10], "properti": [1, 4, 5, 6, 8, 9, 10, 21, 22], "origin": [1, 2, 10], "tokenizer_info": [1, 5, 9, 10, 15, 17, 19, 20, 21, 23, 25, 26], "tokenizerinfo": [1, 5, 7, 9, 15, 17, 19, 21, 23], "info": [1, 5, 9, 10, 19, 20, 21, 26], "associ": [1, 5, 23], "memory_size_byt": 1, "approxim": [1, 5], "usag": [1, 4, 5, 13, 15, 17], "byte": [1, 5, 6, 9, 10], "serialize_json": [1, 4, 10, 26], "str": [1, 2, 4, 5, 6, 8, 9, 10, 16, 21, 26], "serial": [1, 3, 4, 7, 10, 13], "json": [1, 3, 4, 5, 8, 9, 10, 13, 15, 17, 18, 19, 20, 22, 23, 26], "string": [1, 4, 5, 6, 8, 9, 10, 15, 17, 18, 19, 21, 22, 23, 26], "without": [1, 6, 9, 10, 18], "sinc": [1, 19, 20, 21], "share": [1, 2, 26], "multipl": [1, 5, 10, 16, 17, 22, 26], "metadata": [1, 10, 26], "check": [1, 6, 9, 15, 23, 26], "deseri": [1, 3, 4, 10, 26], "json_str": [1, 4, 8, 10], "static": [1, 4, 8, 9, 10], "deserialize_json": [1, 4, 10, 26], "from": [1, 4, 5, 6, 9, 10, 15, 16, 18, 19, 20, 21, 23, 25, 26], "match": [1, 4, 6, 8, 9, 16, 22, 23, 26], "doe": [1, 4, 6, 9, 10, 16, 26], "deserializeformaterror": [1, 3, 4, 7, 10, 26], "rais": [1, 3, 4, 5, 6, 10, 25, 26], "compiled_grammar": [1, 5, 6, 9, 15, 19, 20, 21, 23, 26], "invalidjsonerror": [1, 3, 4, 5, 7, 10, 26], "invalid": [1, 3, 4, 5, 6, 10, 19, 20, 21, 22, 26], "follow": [1, 2, 4, 5, 6, 8, 9, 10, 12, 14, 16, 18, 19, 20, 22, 26], "format": [1, 3, 4, 5, 7, 10, 18, 19, 23, 26], "deserializeversionerror": [1, 3, 4, 7, 10, 26], "__version__": [1, 4, 10, 26], "field": [1, 4, 10, 18, 21, 22, 26], "current": [1, 2, 4, 6, 9, 10, 19, 20, 25, 26], "get_max_recursion_depth": [2, 25], "maximum": [2, 4, 5, 6, 9, 17, 25], "per": [2, 20, 25], "process": [2, 9, 10, 17, 18, 23, 25, 26], "determin": [2, 10, 16], "order": 2, "via": [2, 14, 20], "set_max_recursion_depth": [2, 25], "xgrammar_max_recursion_depth": 2, "environ": [2, 11, 19, 20, 21], "variabl": [2, 12], "integ": [2, 4, 5, 8, 9, 18, 21, 22], "000": 2, "valu": [2, 4, 5, 6, 8, 9, 10, 22], "10": 2, "max_recursion_depth": [2, 25], "thread": [2, 5, 20], "safe": [2, 20], "temp_depth": 2, "context": [2, 4, 6, 23, 25], "temporarili": 2, "exampl": [2, 4, 5, 8, 9, 17, 18, 21], "recursion_depth": 2, "1000": 2, "here": [2, 10, 19, 20, 21, 22], "pass": [2, 9, 10, 16, 20, 23], "restor": 2, "get_serialization_vers": [2, 26], "number": [2, 4, 5, 6, 9, 17], "v4": 2, "serialization_vers": 2, "base": [3, 4, 8, 9, 10, 11, 16, 20, 22], "runtimeerror": [3, 4, 6, 25, 26], "invalidstructuraltagerror": [3, 4, 5, 7], "tag": [3, 4, 5, 7, 13], "repres": [4, 19, 22], "later": [4, 14, 20], "guid": [4, 5, 6, 9, 10, 15, 16, 18, 20], "free": [4, 22, 23], "cfg": 4, "ebnf": [4, 5, 9, 13, 15, 17, 20, 23], "extend": [4, 23], "backu": 4, "naur": 4, "form": [4, 10, 22, 23], "There": [4, 16, 18, 20, 22], "mani": [4, 18], "specif": [4, 6, 11, 14, 15, 19, 22, 23], "literatur": 4, "gbnf": [4, 15, 19], "ggml": [4, 19], "bnf": [4, 9, 19, 23], "http": [4, 5, 9, 10, 11, 14], "github": [4, 5, 10, 14, 15], "com": [4, 5, 10, 14], "ggerganov": [4, 5], "llama": [4, 5, 10, 15, 19, 20, 21, 26], "cpp": [4, 5], "blob": [4, 5, 10], "master": [4, 5], "readm": [4, 5], "md": [4, 5, 11], "print": [4, 6, 9, 14, 15, 19, 21, 23, 26], "convert": [4, 8, 9, 10], "__str__": 4, "grammar_str": 4, "from_ebnf": [4, 23], "ebnf_str": [4, 5, 9, 15, 23], "root_rule_nam": [4, 5, 9], "root": [4, 5, 9, 12, 19], "name": [4, 5, 8, 9, 10, 14, 20, 21, 22], "rule": [4, 5, 9], "regex": [4, 5, 9, 17, 23], "pattern": [4, 5, 16, 17, 23], "fail": [4, 18, 26], "detail": [4, 8, 10, 15, 18], "about": [4, 6, 9, 16, 17, 18, 23], "pars": [4, 9, 18, 25], "error": [4, 18, 26], "from_json_schema": [4, 23], "schema": [4, 5, 8, 9, 15, 16, 17, 19, 21, 22, 23], "union": [4, 5, 6, 7, 9, 10], "basemodel": [4, 5, 8, 9, 16, 21], "dict": [4, 5, 8, 9], "any_whitespac": [4, 5, 9], "bool": [4, 5, 6, 8, 9, 10, 22, 23], "true": [4, 5, 6, 9, 15, 16, 17, 19, 20, 21, 22], "indent": [4, 5, 9], "separ": [4, 5, 8, 9, 22], "strict_mod": [4, 5, 9], "max_whitespace_cnt": [4, 5, 9], "print_converted_ebnf": 4, "fals": [4, 5, 6, 8, 9, 10, 15, 16, 19, 20, 21, 22], "pydant": [4, 5, 9, 16, 21], "model": [4, 5, 9, 10, 14, 15, 17, 19, 20, 21, 22, 23], "whitespac": [4, 5, 9], "want": [4, 14, 18], "convent": [4, 5], "dump": [4, 5, 10, 21], "intern": [4, 6, 26], "whether": [4, 5, 6, 8, 9, 10], "ignor": [4, 9], "space": [4, 5, 9, 10], "output": [4, 5, 6, 8, 9, 15, 16, 18, 19, 21, 22, 23], "one": [4, 5, 6, 8, 9, 16, 21, 22], "line": [4, 5, 9, 22], "forc": 4, "llm": [4, 5, 6, 9, 10, 13, 15, 16, 18, 22, 23, 24, 25], "strictli": 4, "howev": [4, 12, 16], "some": [4, 9, 10, 16, 20], "mai": [4, 5, 10, 19, 21, 25, 26], "tend": 4, "case": [4, 6, 10, 15, 18, 20, 22], "degrad": 4, "qualiti": [4, 18], "see": [4, 5, 8, 10, 11, 15, 18, 19, 20, 21, 24], "sgl": 4, "project": [4, 13, 14], "sglang": 4, "issu": [4, 15, 18], "2216": 4, "issuecom": 4, "2516192009": 4, "more": [4, 8, 10, 15, 18, 19, 22, 23, 24], "two": [4, 5, 9, 17, 20, 21], "comma": [4, 5, 9], "colon": [4, 5, 9], "otherwis": [4, 5, 6, 9, 20, 22], "strict": [4, 5, 9, 22], "mode": [4, 5, 9], "item": [4, 5, 8, 9, 23, 25], "equival": [4, 5, 9, 23], "unevaluatedproperti": [4, 5, 9], "unevaluateditem": [4, 5, 9], "help": [4, 5, 6, 9, 12, 15, 19, 21], "accur": [4, 5, 9], "charact": [4, 5, 9], "between": [4, 5, 9, 10, 16, 22], "element": [4, 5, 8, 9, 22], "like": [4, 5, 6, 9, 16, 18, 22], "kei": [4, 5, 9, 17, 20], "limit": [4, 5, 9], "most": [4, 5, 9, 10, 15, 17, 20, 22, 23], "posit": [4, 5, 9], "For": [4, 9, 11, 16, 17, 18, 20, 21, 22, 23, 24], "debug": [4, 6, 9], "purpos": [4, 9, 26], "from_regex": [4, 23], "regex_str": [4, 23], "creat": [4, 9, 16], "regular": 4, "express": 4, "first": [4, 8, 19, 20, 21, 22, 23], "from_structural_tag": [4, 8], "structural_tag": [4, 5, 8, 22], "structuraltag": [4, 5, 8], "structuraltagitem": [4, 5, 8, 16], "trigger": [4, 5, 8, 22], "document": [4, 5, 11, 15], "its": [4, 5, 17, 18, 19, 20, 21, 23], "singl": [4, 5, 9, 17, 18, 19, 20, 21], "legaci": [4, 5, 8], "deprec": [4, 5, 6, 8, 10], "either": [4, 5, 9], "dictionari": [4, 5], "typeerror": [4, 5], "argument": [4, 5, 9, 22], "handl": [4, 6, 10, 16, 22, 23], "dispatch": [4, 8, 16, 22], "differ": [4, 16, 20], "initi": [4, 6, 9, 16], "until": [4, 8, 16, 22], "encount": [4, 8, 16, 22], "correspond": [4, 8, 16, 22], "end": [4, 8, 9, 16, 19, 21, 22], "advanc": [4, 13, 22, 23], "topic": [4, 13, 23], "semant": 4, "builtin_json_grammar": [4, 23, 26], "standard": [4, 5], "compat": [4, 16], "offici": 4, "www": 4, "org": [4, 9], "en": [4, 9], "html": 4, "concat": 4, "concaten": 4, "That": 4, "oper": [4, 6, 7, 14, 17, 25], "max_thread": [5, 17, 19, 20, 21], "8": [5, 17, 19, 20, 21], "cache_en": [5, 17], "cache_limit_byt": [5, 17, 25], "certain": 5, "compiledgrammar": [5, 6, 7, 9, 18, 21, 23], "parallel": [5, 17], "ha": [5, 6, 10, 17, 18, 20, 22, 25, 26], "cach": [5, 20, 23, 26], "result": [5, 9, 17, 20, 26], "avoid": [5, 18, 25, 26], "time": [5, 6, 9, 11, 17], "__init__": [5, 6, 10, 14], "enabl": [5, 17, 19, 20, 21, 22], "unit": 5, "actual": [5, 12, 19, 20, 21], "slightli": 5, "exce": [5, 6, 25], "compile_json_schema": [5, 15, 17, 21, 23], "compile_builtin_json_grammar": [5, 15, 20, 21, 23], "compile_regex": [5, 17, 23], "compile_structural_tag": 5, "compile_grammar": [5, 15, 17, 19, 23, 26], "overload": 5, "describ": [5, 8, 16, 18, 22, 23], "clear_cach": [5, 17], "clear": [5, 26], "get_cache_size_byt": 5, "override_stop_token": 6, "terminate_without_stop_token": 6, "max_rollback_token": 6, "core": [6, 17, 23], "maintain": [6, 19, 20, 21], "state": [6, 18, 19, 20, 21], "matcher": [6, 9, 19, 20, 21, 25], "accept": [6, 8, 9, 18, 19, 20, 21, 22, 23], "bitmask": [6, 7, 9, 17, 19, 21], "Its": 6, "roll": 6, "back": [6, 10], "also": [6, 10, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25], "util": [6, 9], "jump": 6, "forward": 6, "decod": [6, 10, 13, 15, 19, 21, 22, 23], "whole": [6, 22], "stop": [6, 8, 10, 19, 20, 21, 22], "onli": [6, 9, 17, 18, 22, 26], "termin": [6, 19, 20, 21, 23], "cannot": [6, 9], "new": [6, 11, 15, 16, 22], "finish": 6, "under": 6, "hood": 6, "pushdown": [6, 25], "automaton": 6, "backtrack": 6, "overrid": 6, "ones": [6, 14], "you": [6, 10, 11, 12, 14, 15, 17, 19, 20, 21, 22, 23, 25, 26], "don": [6, 9, 15], "t": [6, 9, 15, 18, 19, 22], "": [6, 10, 17, 20, 21, 22, 23, 26], "alwai": [6, 10, 17, 18, 19, 20, 21], "unlimit": 6, "earlei": 6, "parser": [6, 25], "significantli": 6, "reduc": [6, 17], "rollback": 6, "specul": 6, "accept_token": [6, 18, 19, 20, 21, 23, 25], "token_id": [6, 9, 23, 25], "debug_print": [6, 9], "updat": [6, 11, 14, 19, 20, 21, 26], "try": 6, "id": [6, 9, 10], "out": [6, 15, 20], "special": [6, 10, 22], "captur": [6, 9], "inform": [6, 9, 10, 20, 23, 24, 26], "recurs": [6, 7, 14], "depth": [6, 7, 25], "exceed": 6, "accept_str": [6, 25], "input_str": [6, 9], "consid": [6, 10], "step": [6, 12, 19, 20, 21, 22], "complement": 6, "buffer": 6, "_supportsarrai": 6, "_nestedsequ": 6, "complex": [6, 22], "index": [6, 9], "input": [6, 9, 10, 15, 17, 19, 21, 23], "must": [6, 8, 16, 18, 22], "chang": [6, 9, 11, 26], "arraylik": 6, "other": [6, 8, 10, 15, 20, 22], "arrai": 6, "thei": [6, 10, 20, 22], "dlpack": 6, "protocol": 6, "need_appli": 6, "alreadi": [6, 15, 18], "mismatch": 6, "find_jump_forward_str": [6, 25], "find": [6, 12], "longest": 6, "certainli": 6, "conform": [6, 18], "becom": 6, "requir": [6, 8, 11, 14, 21, 22, 23, 26], "jump_forward_str": 6, "num_token": 6, "previou": 6, "sever": [6, 20, 22], "nor": 6, "is_termin": [6, 19, 20, 21, 23], "deprac": 6, "now": [6, 9, 10, 19, 20, 21, 22], "stop_token_id": [6, 10], "xgr": [7, 15, 17, 18, 19, 21, 23, 25], "vocabtyp": [7, 10], "test": [7, 12], "_json_schema_to_ebnf": [7, 9], "_regex_to_ebnf": [7, 9], "_ebnf_to_grammar_no_norm": [7, 9], "_get_matcher_from_grammar": [7, 9], "_is_grammar_accept_str": [7, 9], "_get_masked_tokens_from_bitmask": [7, 9], "_is_single_token_bitmask": [7, 9], "_bool_mask_to_bitmask": [7, 9], "_bitmask_to_bool_mask": [7, 9], "_get_matcher_from_grammar_and_tokenizer_info": [7, 9], "_get_allow_empty_rule_id": [7, 9], "_generate_range_regex": [7, 9], "_generate_float_regex": [7, 9], "_print_grammar_fsm": [7, 9], "_qwen_xml_tool_calling_to_ebnf": [7, 9], "grammarfunctor": [7, 9], "basic": [7, 22], "combinatori": 7, "top": 7, "level": [7, 10], "config": [7, 10, 12, 14, 15, 17, 19, 20, 21, 22], "except": [7, 22, 26], "conststringformat": 8, "liter": 8, "const_str": [8, 22], "constant": 8, "jsonschemaformat": 8, "json_schema": [8, 22], "anytextformat": 8, "any_text": [8, 22], "text": [8, 10, 15, 18, 19, 21, 22, 23], "qwenxmlparameterformat": [8, 22], "qwen_xml_paramet": [8, 22], "qwen": [8, 9, 10, 22], "xml": [8, 9, 22], "ag": [8, 21, 22], "abov": [8, 20, 22, 23], "bob": [8, 22], "100": [8, 12, 22], "lt": [8, 22], "sequenceformat": 8, "sequenc": [8, 17, 22], "orformat": 8, "tagformat": 8, "triggeredtagsformat": 8, "tagswithseparatorformat": 8, "data": [8, 26], "begin": [8, 16, 22], "content": [8, 15, 18, 19, 21, 22], "triggered_tag": [8, 22], "at_least_on": [8, 22], "stop_after_first": [8, 22], "each": [8, 9, 11, 16, 18, 19, 20, 21, 22, 23, 26], "exactli": [8, 22], "prefix": [8, 16, 22], "func1": [8, 22], "func2": [8, 22], "john": [8, 22], "30": [8, 22], "jane": [8, 22], "25": [8, 22], "any_text1": [8, 22], "any_text2": [8, 22], "least": [8, 17, 18, 22, 25], "tags_with_separ": [8, 22], "zero": [8, 13, 22], "empti": [8, 9, 22], "alia": 8, "annot": 8, "definit": 8, "schema_": 8, "complet": [8, 17, 18, 23, 26], "response_format": [8, 22], "api": [8, 9], "could": [8, 10], "from_legacy_structural_tag": 8, "from_json": 8, "modul": [9, 10, 14], "prone": 9, "product": 9, "bnf_string": 9, "with_rule_nam": 9, "syntax": [9, 18], "javascript": [9, 13], "ecma": 9, "262": 9, "develop": 9, "mozilla": 9, "u": [9, 19, 23], "doc": [9, 10, 13], "web": [9, 24], "refer": [9, 11], "regular_express": 9, "tutori": [9, 19, 20, 21, 23], "featur": [9, 11, 22, 23], "backrefer": 9, "2": [9, 10, 15, 19, 20, 21], "non": [9, 11], "group": [9, 16], "assert": [9, 19, 20, 21], "3": [9, 10, 15, 19, 20, 21, 26], "unicod": [9, 10], "escap": [9, 19, 22], "p": [9, 19, 20, 21], "4": 9, "word": 9, "boundari": [9, 10, 16], "b": [9, 20], "5": [9, 10, 19], "6": 9, "quantifi": 9, "x": 9, "y": 9, "just": [9, 20], "repeat": 9, "workaround": 9, "primarili": 9, "intend": 9, "normal": 9, "unnorm": 9, "contain": [9, 10, 14, 19, 21, 23, 26], "print_tim": 9, "require_termin": 9, "dure": [9, 23, 26], "reject": 9, "mainli": [9, 19, 21], "infer": [9, 18, 19, 21], "rejected_token_id": 9, "is_single_token": 9, "bool_mask": 9, "align": [9, 10, 18], "block": [9, 25], "add": 9, "extra": [9, 19, 21], "while": [9, 22, 23], "bit_mask": 9, "boolean": 9, "cut": 9, "keyword": 9, "constructor": [9, 10], "start": [9, 10, 22], "float": [9, 16], "fsm": 9, "tool": [9, 12], "transform": [9, 10, 15, 20, 23, 26], "These": [9, 22], "structure_norm": 9, "rule_inlin": 9, "inlin": 9, "byte_string_fus": 9, "fuse": 9, "dead_code_elimin": 9, "elimin": 9, "referenc": [9, 11], "lookahead_assertion_analyz": 9, "analyz": 9, "lookahead": 9, "given": [10, 18, 22, 23], "qualnam": 10, "enum": 10, "three": [10, 16, 21, 26], "raw": [10, 23], "byte_fallback": 10, "byte_level": 10, "kept": 10, "kind": 10, "includ": [10, 14, 17, 20, 22, 23, 25, 26], "tiktoken": [10, 23], "e": [10, 14, 16], "g": [10, 14, 16], "microsoft": 10, "phi": [10, 22], "small": 10, "8k": 10, "instruct": [10, 15, 19, 20, 21, 26], "7b": 10, "chat": 10, "etc": [10, 14, 19, 21, 22, 23], "fallback": 10, "bpe": 10, "encod": [10, 19, 20, 21], "through": 10, "convers": 10, "u001b": 10, "0x1b": 10, "appl": [10, 14], "meta": [10, 15, 19, 20, 21, 26], "mini": [10, 22], "huggingfac": [10, 14, 15, 23], "87be06ca77166e6a6215eee5a990ab9f07238a18": 10, "src": 10, "gpt2": 10, "tokenization_gpt2": 10, "py": [10, 14], "l38": 10, "l59": 10, "8b": [10, 26], "encoded_vocab": 10, "vocab_typ": 10, "add_prefix_spac": 10, "necessari": [10, 19, 20, 21, 23], "although": 10, "bytefallback": 10, "\u0121": 10, "deepseek": [10, 17], "v2": 10, "larger": [10, 17, 19, 20, 21], "than": [10, 17, 19, 20, 21, 22], "pleas": [10, 11, 12, 23, 26], "becaus": [10, 17, 18, 23], "len": [10, 15, 19, 20, 21], "auto": [10, 19, 21, 22], "correct": [10, 11, 18], "prepend": 10, "from_huggingfac": [10, 15, 19, 20, 21, 23, 26], "pretrainedtokenizerbas": 10, "variou": [10, 14, 22], "backend": [10, 23], "fast": [10, 13, 23], "automat": [10, 11, 14, 16], "introduc": [10, 15, 19, 21, 23, 26], "misalign": 10, "defin": [10, 11, 17, 22], "eos_token_id": 10, "equal": 10, "diment": 10, "lm_head": 10, "common": [10, 22], "happen": 10, "possibli": 10, "due": [10, 19, 20, 21], "power": 10, "smaller": 10, "ad": [10, 11], "vision": 10, "molmo": 10, "72b": 10, "0924": 10, "imag": 10, "model_vocab_s": 10, "prepend_space_in_token": 10, "decoded_vocab": 10, "special_token_id": 10, "control": [10, 17, 18, 22], "reserv": 10, "dump_metadata": 10, "from_vocab_and_metadata": 10, "sphinx": 11, "host": 11, "written": [11, 14], "markdown": 11, "restructuredtext": 11, "rst": 11, "instal": [11, 13, 15, 24], "depend": [11, 14], "debian": 11, "system": [11, 14, 15, 19, 21], "conda": [11, 14, 19, 20, 21], "your": [11, 17, 19, 20, 21], "packag": [11, 22], "rubi": 11, "sudo": 11, "apt": 11, "python": [11, 13, 15, 22, 24], "m": [11, 14], "pip": [11, 14, 19, 20, 21], "r": [11, 19], "txt": 11, "gem": 11, "jekyl": 11, "remot": 11, "theme": 11, "bash": [11, 14], "script": [11, 12, 14], "local_deploy_sit": 11, "sh": [11, 12, 14], "websit": 11, "localhost": 11, "8888": 11, "built": [11, 14, 15, 20, 21], "merg": 11, "main": [11, 19, 20, 21, 22], "branch": 11, "workflow": [11, 13, 18, 22], "yaml": 11, "upload": 11, "gh": 11, "accordingli": 11, "make": [11, 14, 16, 18, 19, 20, 21, 22], "sure": [11, 16, 19, 20, 21, 22], "code": [11, 13, 19, 20, 21, 24, 25], "repositori": 11, "releas": [11, 17], "run_coverag": 12, "offer": 12, "wai": [12, 15, 20, 22], "librari": [12, 19, 20, 21], "To": [12, 15, 16, 17, 20, 23, 24], "run": [12, 17, 21, 24], "cmake": [12, 14], "xgrammar_enable_coverag": 12, "ON": 12, "configur": [12, 20], "directori": 12, "report": [12, 15, 18], "coverage_report": 12, "mere": 12, "aid": 12, "identifi": 12, "part": [12, 16, 22], "been": [12, 18], "pursu": 12, "advis": 12, "neg": [12, 18, 20], "consequ": 12, "open": [13, 15], "solut": 13, "flexibl": [13, 15, 19, 22], "portabl": 13, "mission": 13, "bring": 13, "overhead": [13, 19, 20, 21], "everywher": 13, "quick": 13, "constrain": [13, 16, 22, 23], "integr": [13, 18, 19, 21, 23], "engin": [13, 22, 23], "runtim": [13, 23], "safeguard": 13, "build": [13, 23], "coverag": 13, "platform": 14, "linux": 14, "maco": 14, "window": 14, "hardwar": 14, "nvidia": 14, "amd": 14, "silicon": 14, "tpu": 14, "9": [14, 19], "wheel": 14, "forg": 14, "command": 14, "verifi": 14, "import": [14, 15, 16, 19, 20, 21, 23, 25, 26], "path": 14, "env": 14, "lib": 14, "python3": 14, "11": 14, "site": 14, "modif": 14, "obtain": 14, "git": 14, "clone": 14, "mlc": [14, 24], "ai": [14, 24], "cd": 14, "pre": [14, 20, 22], "commit": 14, "cp": 14, "isol": [14, 19, 20, 21], "edit": 14, "rebuild": 14, "gate": 14, "cli": 14, "login": 14, "your_hf_token": 14, "pytest": 14, "subset": 14, "hf_token_requir": 14, "rust": 14, "ninja": 14, "mkdir": 14, "run_ctest": 14, "whose": 14, "test_nam": 14, "how": [15, 19, 20, 21, 23], "focus": 15, "instanti": [15, 19, 20, 21], "automodelforcausallm": [15, 19, 21, 23], "autotoken": [15, 19, 20, 21, 23, 26], "autoconfig": [15, 17, 19, 20, 21], "Or": [15, 19, 21], "model_nam": [15, 19, 21], "1b": [15, 19, 20, 21], "from_pretrain": [15, 17, 19, 20, 21, 23, 26], "torch_dtyp": [15, 19, 21], "float32": [15, 19, 21], "device_map": [15, 19, 21], "messag": [15, 19, 21, 22], "role": [15, 19, 21], "assist": [15, 19, 21], "yourself": [15, 19, 21], "briefli": [15, 19], "apply_chat_templ": [15, 19, 21], "add_generation_prompt": [15, 19, 21], "model_input": [15, 19, 21], "return_tensor": [15, 19, 21], "pt": [15, 19, 21], "custom": [15, 19, 21, 22, 23], "grammar_compil": [15, 17, 19, 21, 23], "json_schema_str": [15, 23], "logits_processor": [15, 19, 21], "xgr_logits_processor": [15, 19, 21], "contrib": [15, 19, 21], "hf": 15, "logitsprocessor": [15, 19, 21], "generated_id": [15, 19, 21], "max_new_token": [15, 19, 21], "512": [15, 19, 21], "input_id": [15, 19, 21, 23], "skip_special_token": [15, 19, 21], "problem": 15, "ask": 15, "question": 15, "our": [15, 20], "repo": 15, "still": [16, 22], "avail": [16, 19, 20, 21, 22], "backward": 16, "recommend": [16, 17, 18, 19, 20, 21], "func_nam": 16, "arg1": 16, "arg2": 16, "consist": 16, "accord": [16, 20, 22], "abl": 16, "Then": [16, 18, 19, 20, 21], "get_weath": 16, "citi": [16, 22], "beij": 16, "togeth": 16, "anoth": 16, "ambigu": 16, "enforc": [16, 19, 20, 21], "benefit": [16, 18, 22], "worri": 16, "schema1": 16, "schema2": 16, "arg3": 16, "arg4": 16, "f": [16, 26], "section": [17, 19, 20, 21], "cover": 17, "acceler": [17, 23], "comput": [17, 23], "multithread": [17, 20], "compile_": 17, "gil": 17, "asyncio": [17, 23], "half": 17, "virtual": [17, 19, 20, 21], "async": 17, "def": 17, "submit": 17, "future1": 17, "to_thread": 17, "grammar1": 17, "future2": 17, "grammar2": 17, "wait": 17, "futur": 17, "compiled_grammar1": 17, "await": 17, "compiled_grammar2": 17, "again": [17, 23], "lru": [17, 25], "recent": [17, 18, 25], "evict": [17, 25], "polici": 17, "By": [17, 18], "further": [17, 23], "spent": 17, "128": 17, "1024": 17, "immidi": 17, "sometim": [17, 18], "v3": [17, 22], "815": 17, "probabl": [17, 18], "distribut": [17, 18], "129": 17, "280": 17, "treat": 17, "129280": 17, "token_bitmask": [17, 19, 20, 21, 23], "found": 17, "model_path": 17, "techniqu": 18, "prohibit": 18, "those": 18, "binari": 18, "length": [18, 20], "sampl": [18, 19, 20, 21, 23], "stage": 18, "let": [18, 22], "take": 18, "closer": 18, "look": 18, "infti": 18, "softmax": [18, 19, 20, 21, 23], "sampler": 18, "vaild": 18, "ensur": [18, 19, 21], "guarante": 18, "entir": 18, "adher": [18, 21], "applic": 18, "increas": 18, "nearli": 18, "mistak": 18, "might": 18, "23": 18, "even": 18, "wrong": 18, "easi": [18, 20, 23], "clean": 18, "extran": 18, "parsabl": 18, "seamlessli": 18, "downstream": 18, "safeti": 18, "unexpect": 18, "prevent": 18, "erron": 18, "agent": 18, "abil": 18, "valuabl": 18, "todai": 18, "minim": [18, 22], "impact": 18, "capabl": 18, "respons": [18, 19, 20, 21, 22], "constraint": [18, 22], "doesn": 18, "anyth": 18, "But": [18, 20], "produc": [18, 23], "answer": 18, "expect": 18, "prompt": 18, "affect": 18, "underli": 18, "much": 18, "possibl": 18, "bitset": [18, 23], "speed": 18, "up": [18, 20], "last": [18, 23], "learn": [18, 23], "besid": [19, 24], "go": [19, 20, 21], "over": [19, 20, 21], "achiev": [19, 21, 23], "snippet": [19, 20, 21], "below": [19, 20, 21, 26], "runnabl": [19, 20, 21], "simul": [19, 20, 21], "numpi": [19, 20, 21], "np": [19, 20, 21], "extract": [19, 21], "With": [19, 20, 21, 22, 23], "choic": [19, 20, 21], "model_id": [19, 20, 21], "full_vocab_s": [19, 20, 21], "ebnf_grammar_str": 19, "expr": 19, "term": 19, "num": 19, "interact": [19, 20, 21], "regress": [19, 21], "sim_sampled_respons": [19, 20, 21], "16": 19, "end_of_text": [19, 20, 21], "sim_sampled_token_id": [19, 20, 21], "add_special_token": [19, 20, 21], "loop": [19, 20, 21], "iter": [19, 20, 21], "sim_token_id": [19, 20, 21], "enumer": [19, 20, 21], "randn": [19, 20, 21], "prob": [19, 20, 21, 23], "dim": [19, 20, 21, 23], "next_token_id": [19, 20, 21, 23], "random": [19, 20, 21], "inde": [19, 20, 21], "readi": [19, 20, 21], "easili": [19, 21], "aim": [19, 21, 22], "access": [19, 21, 23], "json_grammar_ebnf_str": 19, "basic_arrai": 19, "basic_object": 19, "basic_ani": 19, "basic_numb": 19, "basic_str": 19, "basic_boolean": 19, "basic_nul": 19, "basic_integ": 19, "ee": 19, "basic_string_1": 19, "x00": 19, "x1f": 19, "bfnrt": 19, "fa": 19, "f0": 19, "null": 19, "w": 19, "n": [19, 22], "final": [19, 20, 21], "compon": [20, 23], "lai": 20, "concept": 20, "demonstr": 20, "encapsul": 20, "conveni": 20, "former": 20, "being": 20, "therefor": 20, "persist": 20, "behavior": 20, "enable_cach": 20, "everi": 20, "thing": 20, "seen": 20, "rather": 20, "essenti": 20, "illeg": 20, "infin": 20, "never": 20, "prepar": 20, "assum": 20, "work": 20, "exact": 20, "sai": 20, "simplic": 20, "loop_it": 20, "paralleliz": 20, "estim": 20, "One": 21, "pick": 21, "person": 21, "person_schema": 21, "titl": 21, "precis": 22, "dynam": 22, "mixtur": 22, "enter": 22, "met": 22, "market": 22, "effort": 22, "compos": 22, "chunk": 22, "wrap": 22, "reach": 22, "design": [22, 24], "qwen3": 22, "coder": 22, "t100": 22, "moreov": 22, "inner": 22, "address": 22, "street": 22, "st": 22, "york": 22, "No": 22, "And": 22, "gemma": 22, "function_nam": 22, "param": 22, "herm": 22, "tool_cal": 22, "get_current_temperatur": 22, "locat": [22, 23], "san": 22, "francisco": 22, "ca": 22, "usa": 22, "quot": 22, "sep": 22, "function_name_1": 22, "jsonc": 22, "function_name_2": 22, "similar": 22, "organ": 22, "tag_and_text": 22, "hybrid": 22, "switch": 22, "would": 22, "serv": 22, "round": 22, "tool_choic": 22, "decid": 22, "oai": 22, "parallel_tool_cal": 22, "read": 23, "understand": 23, "sentencepiec": 23, "preprocess": 23, "simplifi": 23, "automata": [23, 25], "adapt": 23, "bound": 23, "save": 23, "logic": 23, "grammar_match": 23, "modifi": 23, "move": 23, "argmax": 23, "introduct": 23, "write": 23, "hug": 23, "face": 23, "seq_len": 23, "append": 23, "eo": 23, "congratul": 23, "successfulli": 23, "c": 24, "typescript": 24, "sdk": 24, "emscripten": 24, "webassembli": 24, "browser": 24, "webllm": 24, "npm": 24, "mechan": 25, "server": [25, 26], "crash": 25, "involv": 25, "veri": 25, "deep": 25, "caus": 25, "stack": 25, "overflow": 25, "10000": 25, "grow": 25, "too": 25, "larg": 25, "algorithm": 25, "cross": 26, "inter": 26, "commun": 26, "upgrad": 26, "disk": 26, "potenti": 26, "conflict": 26, "grammar_json": 26, "grammar_deseri": 26, "tokenizer_info_json": 26, "tokenizer_info_deseri": 26, "redund": 26, "storag": 26, "compiled_grammar_json": 26, "compiled_grammar_deseri": 26}, "objects": {"xgrammar": [[1, 0, 1, "", "CompiledGrammar"], [4, 0, 1, "", "Grammar"], [5, 0, 1, "", "GrammarCompiler"], [6, 0, 1, "", "GrammarMatcher"], [10, 0, 1, "", "TokenizerInfo"], [10, 0, 1, "", "VocabType"], [0, 4, 1, "", "allocate_token_bitmask"], [0, 4, 1, "", "apply_token_bitmask_inplace"], [0, 5, 1, "", "bitmask_dtype"], [0, 4, 1, "", "get_bitmask_shape"], [2, 4, 1, "", "get_max_recursion_depth"], [2, 4, 1, "", "get_serialization_version"], [2, 4, 1, "", "max_recursion_depth"], [0, 4, 1, "", "reset_token_bitmask"], [2, 4, 1, "", "set_max_recursion_depth"], [9, 6, 0, "-", "testing"]], "xgrammar.CompiledGrammar": [[1, 1, 1, "", "deserialize_json"], [1, 2, 1, "", "grammar"], [1, 2, 1, "", "memory_size_bytes"], [1, 1, 1, "", "serialize_json"], [1, 2, 1, "", "tokenizer_info"]], "xgrammar.Grammar": [[4, 1, 1, "", "__str__"], [4, 1, 1, "", "builtin_json_grammar"], [4, 1, 1, "", "concat"], [4, 1, 1, "", "deserialize_json"], [4, 1, 1, "", "from_ebnf"], [4, 1, 1, "", "from_json_schema"], [4, 1, 1, "", "from_regex"], [4, 1, 1, "", "from_structural_tag"], [4, 1, 1, "", "serialize_json"], [4, 1, 1, "", "union"]], "xgrammar.GrammarCompiler": [[5, 1, 1, "", "__init__"], [5, 2, 1, "", "cache_limit_bytes"], [5, 1, 1, "", "clear_cache"], [5, 1, 1, "", "compile_builtin_json_grammar"], [5, 1, 1, "", "compile_grammar"], [5, 1, 1, "", "compile_json_schema"], [5, 1, 1, "", "compile_regex"], [5, 1, 1, "", "compile_structural_tag"], [5, 1, 1, "", "get_cache_size_bytes"]], "xgrammar.GrammarMatcher": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "accept_string"], [6, 1, 1, "", "accept_token"], [6, 1, 1, "", "fill_next_token_bitmask"], [6, 1, 1, "", "find_jump_forward_string"], [6, 1, 1, "", "is_terminated"], [6, 2, 1, "", "max_rollback_tokens"], [6, 1, 1, "", "reset"], [6, 1, 1, "", "rollback"], [6, 2, 1, "", "stop_token_ids"]], "xgrammar.TokenizerInfo": [[10, 1, 1, "", "__init__"], [10, 2, 1, "", "add_prefix_space"], [10, 2, 1, "", "decoded_vocab"], [10, 1, 1, "", "deserialize_json"], [10, 1, 1, "", "dump_metadata"], [10, 1, 1, "", "from_huggingface"], [10, 1, 1, "", "from_vocab_and_metadata"], [10, 2, 1, "", "prepend_space_in_tokenization"], [10, 1, 1, "", "serialize_json"], [10, 2, 1, "", "special_token_ids"], [10, 2, 1, "", "stop_token_ids"], [10, 2, 1, "", "vocab_size"], [10, 2, 1, "", "vocab_type"]], "xgrammar.VocabType": [[10, 3, 1, "", "BYTE_FALLBACK"], [10, 3, 1, "", "BYTE_LEVEL"], [10, 3, 1, "", "RAW"]], "xgrammar.exception": [[3, 0, 1, "", "DeserializeFormatError"], [3, 0, 1, "", "DeserializeVersionError"], [3, 0, 1, "", "InvalidJSONError"], [3, 0, 1, "", "InvalidStructuralTagError"]], "xgrammar.structural_tag": [[8, 0, 1, "", "AnyTextFormat"], [8, 0, 1, "", "ConstStringFormat"], [8, 5, 1, "", "Format"], [8, 0, 1, "", "JSONSchemaFormat"], [8, 0, 1, "", "OrFormat"], [8, 0, 1, "", "QwenXMLParameterFormat"], [8, 0, 1, "", "SequenceFormat"], [8, 0, 1, "", "StructuralTag"], [8, 0, 1, "", "StructuralTagItem"], [8, 0, 1, "", "TagFormat"], [8, 0, 1, "", "TagsWithSeparatorFormat"], [8, 0, 1, "", "TriggeredTagsFormat"]], "xgrammar.structural_tag.AnyTextFormat": [[8, 3, 1, "", "type"]], "xgrammar.structural_tag.ConstStringFormat": [[8, 3, 1, "", "type"], [8, 3, 1, "", "value"]], "xgrammar.structural_tag.JSONSchemaFormat": [[8, 3, 1, "", "json_schema"], [8, 3, 1, "", "type"]], "xgrammar.structural_tag.OrFormat": [[8, 3, 1, "", "elements"], [8, 3, 1, "", "type"]], "xgrammar.structural_tag.QwenXMLParameterFormat": [[8, 3, 1, "", "json_schema"], [8, 3, 1, "", "type"]], "xgrammar.structural_tag.SequenceFormat": [[8, 3, 1, "", "elements"], [8, 3, 1, "", "type"]], "xgrammar.structural_tag.StructuralTag": [[8, 3, 1, "", "format"], [8, 1, 1, "", "from_json"], [8, 1, 1, "", "from_legacy_structural_tag"], [8, 3, 1, "", "type"]], "xgrammar.structural_tag.StructuralTagItem": [[8, 3, 1, "", "begin"], [8, 3, 1, "", "end"], [8, 3, 1, "", "schema_"]], "xgrammar.structural_tag.TagFormat": [[8, 3, 1, "", "begin"], [8, 3, 1, "", "content"], [8, 3, 1, "", "end"], [8, 3, 1, "", "type"]], "xgrammar.structural_tag.TagsWithSeparatorFormat": [[8, 3, 1, "", "at_least_one"], [8, 3, 1, "", "separator"], [8, 3, 1, "", "stop_after_first"], [8, 3, 1, "", "tags"], [8, 3, 1, "", "type"]], "xgrammar.structural_tag.TriggeredTagsFormat": [[8, 3, 1, "", "at_least_one"], [8, 3, 1, "", "stop_after_first"], [8, 3, 1, "", "tags"], [8, 3, 1, "", "triggers"], [8, 3, 1, "", "type"]], "xgrammar.testing": [[9, 0, 1, "", "GrammarFunctor"], [9, 4, 1, "", "_bitmask_to_bool_mask"], [9, 4, 1, "", "_bool_mask_to_bitmask"], [9, 4, 1, "", "_ebnf_to_grammar_no_normalization"], [9, 4, 1, "", "_generate_float_regex"], [9, 4, 1, "", "_generate_range_regex"], [9, 4, 1, "", "_get_allow_empty_rule_ids"], [9, 4, 1, "", "_get_masked_tokens_from_bitmask"], [9, 4, 1, "", "_get_matcher_from_grammar"], [9, 4, 1, "", "_get_matcher_from_grammar_and_tokenizer_info"], [9, 4, 1, "", "_is_grammar_accept_string"], [9, 4, 1, "", "_is_single_token_bitmask"], [9, 4, 1, "", "_json_schema_to_ebnf"], [9, 4, 1, "", "_print_grammar_fsms"], [9, 4, 1, "", "_qwen_xml_tool_calling_to_ebnf"], [9, 4, 1, "", "_regex_to_ebnf"]], "xgrammar.testing.GrammarFunctor": [[9, 1, 1, "", "byte_string_fuser"], [9, 1, 1, "", "dead_code_eliminator"], [9, 1, 1, "", "lookahead_assertion_analyzer"], [9, 1, 1, "", "rule_inliner"], [9, 1, 1, "", "structure_normalizer"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "module", "Python module"]}, "titleterms": {"bitmask": [0, 20, 23], "oper": 0, "xgr": [1, 4, 5, 6, 9, 10, 20, 26], "compiledgrammar": [1, 20, 26], "config": 2, "recurs": [2, 25], "depth": 2, "manag": 2, "serial": [2, 26], "version": 2, "except": 3, "grammar": [4, 15, 16, 17, 23, 26], "grammarcompil": [5, 20], "grammarmatch": [6, 20], "xgrammar": [7, 13, 14, 18, 19, 20, 21, 23], "python": [7, 14], "api": [7, 13, 16, 22, 24], "structur": [8, 16, 20, 22], "tag": [8, 16, 22], "basic": 8, "format": [8, 22], "combinatori": 8, "union": 8, "top": 8, "level": [8, 20], "class": 8, "test": [9, 14], "tokenizerinfo": [10, 20, 26], "build": [11, 14], "doc": 11, "local": 11, "deploi": 11, "github": 11, "page": 11, "best": 11, "practic": 11, "write": 11, "code": 12, "coverag": 12, "welcom": 13, "get": 13, "start": [13, 15], "tutori": 13, "featur": 13, "develop": 13, "guid": [13, 19], "refer": 13, "instal": [14, 19, 20, 21], "method": 14, "1": [14, 22], "prebuilt": 14, "packag": 14, "2": [14, 22], "from": 14, "sourc": 14, "option": 14, "run": 14, "3": [14, 22], "c": 14, "librari": 14, "onli": 14, "quick": 15, "prepar": 15, "compil": [15, 17, 23], "gener": [15, 19, 20, 21, 23], "what": 15, "do": 15, "next": [15, 18, 23], "advanc": [16, 17], "topic": [16, 17], "deprec": 16, "from_structural_tag": 16, "trigger": 16, "paramet": 16, "return": 16, "exampl": [16, 22], "multi": 17, "thread": 17, "cach": [17, 25], "handl": 17, "pad": 17, "llm": [17, 19, 20, 21], "output": 17, "logit": [17, 20], "constrain": 18, "decod": 18, "": 18, "implement": 18, "step": [18, 23], "ebnf": 19, "engin": [19, 20, 21], "try": [19, 21], "out": [19, 21], "via": [19, 21], "hf": [19, 21], "transform": [19, 21], "integr": 20, "high": 20, "flow": 20, "auto": 20, "regress": 20, "batch": 20, "infer": 20, "json": 21, "usag": 22, "type": 22, "tool": 22, "call": 22, "forc": 22, "think": 22, "llama": 22, "style": 22, "4": 22, "deepseek": 22, "5": 22, "non": 22, "mode": 22, "compat": 22, "openai": 22, "choic": 22, "parallel": 22, "workflow": 23, "token": 23, "info": 23, "matcher": 23, "The": 23, "loop": 23, "javascript": 24, "runtim": 25, "safeguard": 25, "limit": 25, "size": 25}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Bitmask Operations": [[0, "bitmask-operations"]], "xgr.CompiledGrammar": [[1, "xgr-compiledgrammar"], [20, "xgr-compiledgrammar"], [26, "xgr-compiledgrammar"]], "Config": [[2, "config"]], "Recursion Depth Management": [[2, "recursion-depth-management"]], "Serialization Version": [[2, "serialization-version"]], "Exception": [[3, "exception"]], "xgr.Grammar": [[4, "xgr-grammar"], [26, "xgr-grammar"]], "xgr.GrammarCompiler": [[5, "xgr-grammarcompiler"], [20, "xgr-grammarcompiler"]], "xgr.GrammarMatcher": [[6, "xgr-grammarmatcher"], [20, "xgr-grammarmatcher"]], "XGrammar Python API": [[7, "xgrammar-python-api"]], "Structural Tag": [[8, "structural-tag"]], "Basic Formats": [[8, "basic-formats"]], "Combinatorial Formats": [[8, "combinatorial-formats"]], "Format Union": [[8, "format-union"]], "Top Level Classes": [[8, "top-level-classes"]], "xgr.testing": [[9, "module-xgrammar.testing"]], "xgr.TokenizerInfo": [[10, "xgr-tokenizerinfo"], [20, "xgr-tokenizerinfo"], [26, "xgr-tokenizerinfo"]], "Building Docs": [[11, "building-docs"]], "Building Docs Locally": [[11, "building-docs-locally"]], "Deploying Docs on GitHub Pages": [[11, "deploying-docs-on-github-pages"]], "Best Practices for Writing Docs": [[11, "best-practices-for-writing-docs"]], "Code Coverage": [[12, "code-coverage"]], "\ud83d\udc4b Welcome to XGrammar": [[13, "welcome-to-xgrammar"]], "Get Started": [[13, null]], "Tutorials": [[13, null]], "XGrammar Features": [[13, null]], "Developer Guide": [[13, null]], "API Reference": [[13, null]], "Installation": [[14, "installation"]], "Method 1: Prebuilt Package": [[14, "method-1-prebuilt-package"]], "Method 2: Build XGrammar Python Package from Source": [[14, "method-2-build-xgrammar-python-package-from-source"]], "Optional: Run Python Tests": [[14, "optional-run-python-tests"]], "Method 3: Build XGrammar C++ Library Only": [[14, "method-3-build-xgrammar-c-library-only"]], "Optional: Run C++ Tests": [[14, "optional-run-c-tests"]], "Quick Start": [[15, "quick-start"]], "Preparation": [[15, "preparation"]], "Compile Grammar": [[15, "compile-grammar"]], "Generate with grammar": [[15, "generate-with-grammar"]], "What to Do Next": [[15, "what-to-do-next"]], "Advanced Topics of the Structural Tag": [[16, "advanced-topics-of-the-structural-tag"]], "Deprecated API: Grammar.from_structural_tag(tags, triggers)": [[16, "deprecated-api-grammar-from-structural-tag-tags-triggers"]], "Parameters": [[16, "parameters"]], "Returns": [[16, "returns"]], "Example": [[16, "example"]], "Advanced Topics": [[17, "advanced-topics"]], "Multi-threaded Grammar Compilation and Cache": [[17, "multi-threaded-grammar-compilation-and-cache"]], "Handle Padding to the LLM Output Logits": [[17, "handle-padding-to-the-llm-output-logits"]], "Constrained Decoding": [[18, "constrained-decoding"]], "XGrammar\u2019s Implementation": [[18, "xgrammar-s-implementation"]], "Next Steps": [[18, "next-steps"], [23, "next-steps"]], "EBNF-Guided Generation": [[19, "ebnf-guided-generation"]], "Install XGrammar": [[19, "install-xgrammar"], [20, "install-xgrammar"], [21, "install-xgrammar"]], "EBNF-Guided Generation in LLM Engines": [[19, "ebnf-guided-generation-in-llm-engines"]], "Try out via HF Transformers": [[19, "try-out-via-hf-transformers"], [21, "try-out-via-hf-transformers"]], "Integration with LLM Engine": [[20, "integration-with-llm-engine"]], "High-Level Flow": [[20, "high-level-flow"]], "Bitmasking Logits in Auto-regressive Generation": [[20, "bitmasking-logits-in-auto-regressive-generation"]], "Structured Generation for Batched Inference": [[20, "structured-generation-for-batched-inference"]], "JSON Generation": [[21, "json-generation"]], "JSON Generation in LLM Engines": [[21, "json-generation-in-llm-engines"]], "Structural Tag Usage": [[22, "structural-tag-usage"]], "Usage": [[22, "usage"]], "Format Types": [[22, "format-types"]], "Examples": [[22, "examples"]], "Example 1: Tool calling": [[22, "example-1-tool-calling"]], "Example 2: Force think": [[22, "example-2-force-think"]], "Example 3: Think & Force tool calling (Llama style)": [[22, "example-3-think-force-tool-calling-llama-style"]], "Example 4: Think & force tool calling (DeepSeek style)": [[22, "example-4-think-force-tool-calling-deepseek-style"]], "Example 5: Force non-thinking mode": [[22, "example-5-force-non-thinking-mode"]], "Compatibility with the OpenAI Tool Calling API": [[22, "compatibility-with-the-openai-tool-calling-api"]], "Tool Choice": [[22, "tool-choice"]], "Parallel Tool Calling": [[22, "parallel-tool-calling"]], "Workflow of XGrammar": [[23, "workflow-of-xgrammar"]], "Grammar": [[23, "grammar"]], "Tokenizer Info": [[23, "tokenizer-info"]], "Grammar Compiler": [[23, "grammar-compiler"]], "Compiled Grammar": [[23, "compiled-grammar"]], "Token Bitmask": [[23, "token-bitmask"]], "Grammar Matcher": [[23, "grammar-matcher"]], "The Generation Loop": [[23, "the-generation-loop"]], "JavaScript API": [[24, "javascript-api"]], "Runtime Safeguards": [[25, "runtime-safeguards"]], "Recursion Limit": [[25, "recursion-limit"]], "Cache Size Limit": [[25, "cache-size-limit"]], "Serialization": [[26, "serialization"]]}, "indexentries": {"allocate_token_bitmask() (in module xgrammar)": [[0, "xgrammar.allocate_token_bitmask"]], "apply_token_bitmask_inplace() (in module xgrammar)": [[0, "xgrammar.apply_token_bitmask_inplace"]], "bitmask_dtype (in module xgrammar)": [[0, "xgrammar.bitmask_dtype"]], "get_bitmask_shape() (in module xgrammar)": [[0, "xgrammar.get_bitmask_shape"]], "reset_token_bitmask() (in module xgrammar)": [[0, "xgrammar.reset_token_bitmask"]], "compiledgrammar (class in xgrammar)": [[1, "xgrammar.CompiledGrammar"]], "deserialize_json() (xgrammar.compiledgrammar static method)": [[1, "xgrammar.CompiledGrammar.deserialize_json"]], "grammar (xgrammar.compiledgrammar property)": [[1, "xgrammar.CompiledGrammar.grammar"]], "memory_size_bytes (xgrammar.compiledgrammar property)": [[1, "xgrammar.CompiledGrammar.memory_size_bytes"]], "serialize_json() (xgrammar.compiledgrammar method)": [[1, "xgrammar.CompiledGrammar.serialize_json"]], "tokenizer_info (xgrammar.compiledgrammar property)": [[1, "xgrammar.CompiledGrammar.tokenizer_info"]], "get_max_recursion_depth() (in module xgrammar)": [[2, "xgrammar.get_max_recursion_depth"]], "get_serialization_version() (in module xgrammar)": [[2, "xgrammar.get_serialization_version"]], "max_recursion_depth() (in module xgrammar)": [[2, "xgrammar.max_recursion_depth"]], "set_max_recursion_depth() (in module xgrammar)": [[2, "xgrammar.set_max_recursion_depth"]], "deserializeformaterror (class in xgrammar.exception)": [[3, "xgrammar.exception.DeserializeFormatError"]], "deserializeversionerror (class in xgrammar.exception)": [[3, "xgrammar.exception.DeserializeVersionError"]], "invalidjsonerror (class in xgrammar.exception)": [[3, "xgrammar.exception.InvalidJSONError"]], "invalidstructuraltagerror (class in xgrammar.exception)": [[3, "xgrammar.exception.InvalidStructuralTagError"]], "grammar (class in xgrammar)": [[4, "xgrammar.Grammar"]], "__str__() (xgrammar.grammar method)": [[4, "xgrammar.Grammar.__str__"]], "builtin_json_grammar() (xgrammar.grammar static method)": [[4, "xgrammar.Grammar.builtin_json_grammar"]], "concat() (xgrammar.grammar static method)": [[4, "xgrammar.Grammar.concat"]], "deserialize_json() (xgrammar.grammar static method)": [[4, "xgrammar.Grammar.deserialize_json"]], "from_ebnf() (xgrammar.grammar static method)": [[4, "xgrammar.Grammar.from_ebnf"]], "from_json_schema() (xgrammar.grammar static method)": [[4, "xgrammar.Grammar.from_json_schema"]], "from_regex() (xgrammar.grammar static method)": [[4, "xgrammar.Grammar.from_regex"]], "from_structural_tag() (xgrammar.grammar static method)": [[4, "xgrammar.Grammar.from_structural_tag"]], "serialize_json() (xgrammar.grammar method)": [[4, "xgrammar.Grammar.serialize_json"]], "union() (xgrammar.grammar static method)": [[4, "xgrammar.Grammar.union"]], "grammarcompiler (class in xgrammar)": [[5, "xgrammar.GrammarCompiler"]], "__init__() (xgrammar.grammarcompiler method)": [[5, "xgrammar.GrammarCompiler.__init__"]], "cache_limit_bytes (xgrammar.grammarcompiler property)": [[5, "xgrammar.GrammarCompiler.cache_limit_bytes"]], "clear_cache() (xgrammar.grammarcompiler method)": [[5, "xgrammar.GrammarCompiler.clear_cache"]], "compile_builtin_json_grammar() (xgrammar.grammarcompiler method)": [[5, "xgrammar.GrammarCompiler.compile_builtin_json_grammar"]], "compile_grammar() (xgrammar.grammarcompiler method)": [[5, "xgrammar.GrammarCompiler.compile_grammar"]], "compile_json_schema() (xgrammar.grammarcompiler method)": [[5, "xgrammar.GrammarCompiler.compile_json_schema"]], "compile_regex() (xgrammar.grammarcompiler method)": [[5, "xgrammar.GrammarCompiler.compile_regex"]], "compile_structural_tag() (xgrammar.grammarcompiler method)": [[5, "xgrammar.GrammarCompiler.compile_structural_tag"]], "get_cache_size_bytes() (xgrammar.grammarcompiler method)": [[5, "xgrammar.GrammarCompiler.get_cache_size_bytes"]], "grammarmatcher (class in xgrammar)": [[6, "xgrammar.GrammarMatcher"]], "__init__() (xgrammar.grammarmatcher method)": [[6, "xgrammar.GrammarMatcher.__init__"]], "accept_string() (xgrammar.grammarmatcher method)": [[6, "xgrammar.GrammarMatcher.accept_string"]], "accept_token() (xgrammar.grammarmatcher method)": [[6, "xgrammar.GrammarMatcher.accept_token"]], "fill_next_token_bitmask() (xgrammar.grammarmatcher method)": [[6, "xgrammar.GrammarMatcher.fill_next_token_bitmask"]], "find_jump_forward_string() (xgrammar.grammarmatcher method)": [[6, "xgrammar.GrammarMatcher.find_jump_forward_string"]], "is_terminated() (xgrammar.grammarmatcher method)": [[6, "xgrammar.GrammarMatcher.is_terminated"]], "max_rollback_tokens (xgrammar.grammarmatcher property)": [[6, "xgrammar.GrammarMatcher.max_rollback_tokens"]], "reset() (xgrammar.grammarmatcher method)": [[6, "xgrammar.GrammarMatcher.reset"]], "rollback() (xgrammar.grammarmatcher method)": [[6, "xgrammar.GrammarMatcher.rollback"]], "stop_token_ids (xgrammar.grammarmatcher property)": [[6, "xgrammar.GrammarMatcher.stop_token_ids"]], "anytextformat (class in xgrammar.structural_tag)": [[8, "xgrammar.structural_tag.AnyTextFormat"]], "conststringformat (class in xgrammar.structural_tag)": [[8, "xgrammar.structural_tag.ConstStringFormat"]], "format (in module xgrammar.structural_tag)": [[8, "xgrammar.structural_tag.Format"]], "jsonschemaformat (class in xgrammar.structural_tag)": [[8, "xgrammar.structural_tag.JSONSchemaFormat"]], "orformat (class in xgrammar.structural_tag)": [[8, "xgrammar.structural_tag.OrFormat"]], "qwenxmlparameterformat (class in xgrammar.structural_tag)": [[8, "xgrammar.structural_tag.QwenXMLParameterFormat"]], "sequenceformat (class in xgrammar.structural_tag)": [[8, "xgrammar.structural_tag.SequenceFormat"]], "structuraltag (class in xgrammar.structural_tag)": [[8, "xgrammar.structural_tag.StructuralTag"]], "structuraltagitem (class in xgrammar.structural_tag)": [[8, "xgrammar.structural_tag.StructuralTagItem"]], "tagformat (class in xgrammar.structural_tag)": [[8, "xgrammar.structural_tag.TagFormat"]], "tagswithseparatorformat (class in xgrammar.structural_tag)": [[8, "xgrammar.structural_tag.TagsWithSeparatorFormat"]], "triggeredtagsformat (class in xgrammar.structural_tag)": [[8, "xgrammar.structural_tag.TriggeredTagsFormat"]], "at_least_one (xgrammar.structural_tag.tagswithseparatorformat attribute)": [[8, "xgrammar.structural_tag.TagsWithSeparatorFormat.at_least_one"]], "at_least_one (xgrammar.structural_tag.triggeredtagsformat attribute)": [[8, "xgrammar.structural_tag.TriggeredTagsFormat.at_least_one"]], "begin (xgrammar.structural_tag.structuraltagitem attribute)": [[8, "xgrammar.structural_tag.StructuralTagItem.begin"]], "begin (xgrammar.structural_tag.tagformat attribute)": [[8, "xgrammar.structural_tag.TagFormat.begin"]], "content (xgrammar.structural_tag.tagformat attribute)": [[8, "xgrammar.structural_tag.TagFormat.content"]], "elements (xgrammar.structural_tag.orformat attribute)": [[8, "xgrammar.structural_tag.OrFormat.elements"]], "elements (xgrammar.structural_tag.sequenceformat attribute)": [[8, "xgrammar.structural_tag.SequenceFormat.elements"]], "end (xgrammar.structural_tag.structuraltagitem attribute)": [[8, "xgrammar.structural_tag.StructuralTagItem.end"]], "end (xgrammar.structural_tag.tagformat attribute)": [[8, "xgrammar.structural_tag.TagFormat.end"]], "format (xgrammar.structural_tag.structuraltag attribute)": [[8, "xgrammar.structural_tag.StructuralTag.format"]], "from_json() (xgrammar.structural_tag.structuraltag static method)": [[8, "xgrammar.structural_tag.StructuralTag.from_json"]], "from_legacy_structural_tag() (xgrammar.structural_tag.structuraltag static method)": [[8, "xgrammar.structural_tag.StructuralTag.from_legacy_structural_tag"]], "json_schema (xgrammar.structural_tag.jsonschemaformat attribute)": [[8, "xgrammar.structural_tag.JSONSchemaFormat.json_schema"]], "json_schema (xgrammar.structural_tag.qwenxmlparameterformat attribute)": [[8, "xgrammar.structural_tag.QwenXMLParameterFormat.json_schema"]], "schema_ (xgrammar.structural_tag.structuraltagitem attribute)": [[8, "xgrammar.structural_tag.StructuralTagItem.schema_"]], "separator (xgrammar.structural_tag.tagswithseparatorformat attribute)": [[8, "xgrammar.structural_tag.TagsWithSeparatorFormat.separator"]], "stop_after_first (xgrammar.structural_tag.tagswithseparatorformat attribute)": [[8, "xgrammar.structural_tag.TagsWithSeparatorFormat.stop_after_first"]], "stop_after_first (xgrammar.structural_tag.triggeredtagsformat attribute)": [[8, "xgrammar.structural_tag.TriggeredTagsFormat.stop_after_first"]], "tags (xgrammar.structural_tag.tagswithseparatorformat attribute)": [[8, "xgrammar.structural_tag.TagsWithSeparatorFormat.tags"]], "tags (xgrammar.structural_tag.triggeredtagsformat attribute)": [[8, "xgrammar.structural_tag.TriggeredTagsFormat.tags"]], "triggers (xgrammar.structural_tag.triggeredtagsformat attribute)": [[8, "xgrammar.structural_tag.TriggeredTagsFormat.triggers"]], "type (xgrammar.structural_tag.anytextformat attribute)": [[8, "xgrammar.structural_tag.AnyTextFormat.type"]], "type (xgrammar.structural_tag.conststringformat attribute)": [[8, "xgrammar.structural_tag.ConstStringFormat.type"]], "type (xgrammar.structural_tag.jsonschemaformat attribute)": [[8, "xgrammar.structural_tag.JSONSchemaFormat.type"]], "type (xgrammar.structural_tag.orformat attribute)": [[8, "xgrammar.structural_tag.OrFormat.type"]], "type (xgrammar.structural_tag.qwenxmlparameterformat attribute)": [[8, "xgrammar.structural_tag.QwenXMLParameterFormat.type"]], "type (xgrammar.structural_tag.sequenceformat attribute)": [[8, "xgrammar.structural_tag.SequenceFormat.type"]], "type (xgrammar.structural_tag.structuraltag attribute)": [[8, "xgrammar.structural_tag.StructuralTag.type"]], "type (xgrammar.structural_tag.tagformat attribute)": [[8, "xgrammar.structural_tag.TagFormat.type"]], "type (xgrammar.structural_tag.tagswithseparatorformat attribute)": [[8, "xgrammar.structural_tag.TagsWithSeparatorFormat.type"]], "type (xgrammar.structural_tag.triggeredtagsformat attribute)": [[8, "xgrammar.structural_tag.TriggeredTagsFormat.type"]], "value (xgrammar.structural_tag.conststringformat attribute)": [[8, "xgrammar.structural_tag.ConstStringFormat.value"]], "grammarfunctor (class in xgrammar.testing)": [[9, "xgrammar.testing.GrammarFunctor"]], "_bitmask_to_bool_mask() (in module xgrammar.testing)": [[9, "xgrammar.testing._bitmask_to_bool_mask"]], "_bool_mask_to_bitmask() (in module xgrammar.testing)": [[9, "xgrammar.testing._bool_mask_to_bitmask"]], "_ebnf_to_grammar_no_normalization() (in module xgrammar.testing)": [[9, "xgrammar.testing._ebnf_to_grammar_no_normalization"]], "_generate_float_regex() (in module xgrammar.testing)": [[9, "xgrammar.testing._generate_float_regex"]], "_generate_range_regex() (in module xgrammar.testing)": [[9, "xgrammar.testing._generate_range_regex"]], "_get_allow_empty_rule_ids() (in module xgrammar.testing)": [[9, "xgrammar.testing._get_allow_empty_rule_ids"]], "_get_masked_tokens_from_bitmask() (in module xgrammar.testing)": [[9, "xgrammar.testing._get_masked_tokens_from_bitmask"]], "_get_matcher_from_grammar() (in module xgrammar.testing)": [[9, "xgrammar.testing._get_matcher_from_grammar"]], "_get_matcher_from_grammar_and_tokenizer_info() (in module xgrammar.testing)": [[9, "xgrammar.testing._get_matcher_from_grammar_and_tokenizer_info"]], "_is_grammar_accept_string() (in module xgrammar.testing)": [[9, "xgrammar.testing._is_grammar_accept_string"]], "_is_single_token_bitmask() (in module xgrammar.testing)": [[9, "xgrammar.testing._is_single_token_bitmask"]], "_json_schema_to_ebnf() (in module xgrammar.testing)": [[9, "xgrammar.testing._json_schema_to_ebnf"]], "_print_grammar_fsms() (in module xgrammar.testing)": [[9, "xgrammar.testing._print_grammar_fsms"]], "_qwen_xml_tool_calling_to_ebnf() (in module xgrammar.testing)": [[9, "xgrammar.testing._qwen_xml_tool_calling_to_ebnf"]], "_regex_to_ebnf() (in module xgrammar.testing)": [[9, "xgrammar.testing._regex_to_ebnf"]], "byte_string_fuser() (xgrammar.testing.grammarfunctor static method)": [[9, "xgrammar.testing.GrammarFunctor.byte_string_fuser"]], "dead_code_eliminator() (xgrammar.testing.grammarfunctor static method)": [[9, "xgrammar.testing.GrammarFunctor.dead_code_eliminator"]], "lookahead_assertion_analyzer() (xgrammar.testing.grammarfunctor static method)": [[9, "xgrammar.testing.GrammarFunctor.lookahead_assertion_analyzer"]], "module": [[9, "module-xgrammar.testing"]], "rule_inliner() (xgrammar.testing.grammarfunctor static method)": [[9, "xgrammar.testing.GrammarFunctor.rule_inliner"]], "structure_normalizer() (xgrammar.testing.grammarfunctor static method)": [[9, "xgrammar.testing.GrammarFunctor.structure_normalizer"]], "xgrammar.testing": [[9, "module-xgrammar.testing"]], "byte_fallback (xgrammar.vocabtype attribute)": [[10, "xgrammar.VocabType.BYTE_FALLBACK"]], "byte_level (xgrammar.vocabtype attribute)": [[10, "xgrammar.VocabType.BYTE_LEVEL"]], "raw (xgrammar.vocabtype attribute)": [[10, "xgrammar.VocabType.RAW"]], "tokenizerinfo (class in xgrammar)": [[10, "xgrammar.TokenizerInfo"]], "vocabtype (class in xgrammar)": [[10, "xgrammar.VocabType"]], "__init__() (xgrammar.tokenizerinfo method)": [[10, "xgrammar.TokenizerInfo.__init__"]], "add_prefix_space (xgrammar.tokenizerinfo property)": [[10, "xgrammar.TokenizerInfo.add_prefix_space"]], "decoded_vocab (xgrammar.tokenizerinfo property)": [[10, "xgrammar.TokenizerInfo.decoded_vocab"]], "deserialize_json() (xgrammar.tokenizerinfo static method)": [[10, "xgrammar.TokenizerInfo.deserialize_json"]], "dump_metadata() (xgrammar.tokenizerinfo method)": [[10, "xgrammar.TokenizerInfo.dump_metadata"]], "from_huggingface() (xgrammar.tokenizerinfo static method)": [[10, "xgrammar.TokenizerInfo.from_huggingface"]], "from_vocab_and_metadata() (xgrammar.tokenizerinfo static method)": [[10, "xgrammar.TokenizerInfo.from_vocab_and_metadata"]], "prepend_space_in_tokenization (xgrammar.tokenizerinfo property)": [[10, "xgrammar.TokenizerInfo.prepend_space_in_tokenization"]], "serialize_json() (xgrammar.tokenizerinfo method)": [[10, "xgrammar.TokenizerInfo.serialize_json"]], "special_token_ids (xgrammar.tokenizerinfo property)": [[10, "xgrammar.TokenizerInfo.special_token_ids"]], "stop_token_ids (xgrammar.tokenizerinfo property)": [[10, "xgrammar.TokenizerInfo.stop_token_ids"]], "vocab_size (xgrammar.tokenizerinfo property)": [[10, "xgrammar.TokenizerInfo.vocab_size"]], "vocab_type (xgrammar.tokenizerinfo property)": [[10, "xgrammar.TokenizerInfo.vocab_type"]]}})